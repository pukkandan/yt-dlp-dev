[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "yt-dlp"
maintainers = [
    {name = "pukkandan", email = "pukkandan.ytdlp@gmail.com"},
    {name = "Grub4K", email = "contact@grub4k.xyz"},
    {name = "bashonly", email = "bashonly@protonmail.com"},
]
description = "A youtube-dl fork with additional features and patches"
readme = "README.md"
requires-python = ">=3.8"
keywords = [
    "youtube-dl",
    "video-downloader",
    "youtube-downloader",
    "sponsorblock",
    "youtube-dlc",
    "yt-dlp",
]
license = {file = "LICENSE"}
classifiers = [
    "Topic :: Multimedia :: Video",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = [
    "brotli; implementation_name=='cpython'",
    "brotlicffi; implementation_name!='cpython'",
    "certifi",
    "mutagen",
    "pycryptodomex",
    "requests>=2.31.0,<3",
    "urllib3>=1.26.17,<3",
    "websockets>=12.0",
]

[project.optional-dependencies]
secretstorage = [
    "cffi",
    "secretstorage",
]
build = [
    "build",
    "hatchling",
    "pip",
    "wheel",
]
dev = [
    "autopep8~=2.0",
    "pre-commit",
    "pytest",
    "ruff==0.2.*",
]
pyinstaller = ["pyinstaller>=6.3"]
py2exe = ["py2exe>=0.12"]

[project.urls]
Documentation = "https://github.com/yt-dlp/yt-dlp#readme"
Repository = "https://github.com/yt-dlp/yt-dlp"
Tracker = "https://github.com/yt-dlp/yt-dlp/issues"
Funding = "https://github.com/yt-dlp/yt-dlp/blob/master/Collaborators.md#collaborators"

[project.scripts]
yt-dlp = "yt_dlp:main"

[project.entry-points.pyinstaller40]
hook-dirs = "yt_dlp.__pyinstaller:get_hook_dirs"

[tool.hatch.build.targets.sdist]
include = [
    "/yt_dlp",
    "/devscripts",
    "/test",
    "/.gitignore",  # included by default, needed for auto-excludes
    "/Changelog.md",
    "/LICENSE",  # included as license
    "/pyproject.toml",  # included by default
    "/README.md",  # included as readme
    "/supportedsites.md",
]
exclude = ["/yt_dlp/__pyinstaller"]
artifacts = [
    "/yt_dlp/extractor/lazy_extractors.py",
    "/completions",
    "/AUTHORS",  # included by default
    "/README.txt",
    "/yt-dlp.1",
]

[tool.hatch.build.targets.wheel]
packages = ["yt_dlp"]
exclude = ["/yt_dlp/__pyinstaller"]
artifacts = ["/yt_dlp/extractor/lazy_extractors.py"]

[tool.hatch.build.targets.wheel.shared-data]
"completions/bash/yt-dlp" = "share/bash-completion/completions/yt-dlp"
"completions/zsh/_yt-dlp" = "share/zsh/site-functions/_yt-dlp"
"completions/fish/yt-dlp.fish" = "share/fish/vendor_completions.d/yt-dlp.fish"
"README.txt" = "share/doc/yt_dlp/README.txt"
"yt-dlp.1" = "share/man/man1/yt-dlp.1"

[tool.hatch.version]
path = "yt_dlp/version.py"
pattern = "_pkg_version = '(?P<version>[^']+)'"

[tool.hatch.envs.default]
features = ["dev"]
path = ".venv"

[tool.hatch.envs.default.scripts]
install = "pre-commit install"
lint = "ruff check --fix {args:.}"
format = "autopep8 --in-place {args:.}"
check = [
    "ruff check {args:.}",
    "autopep8 --diff {args:.}",
]
test = "python -m devscripts.run_tests {args}"

[[tool.hatch.envs.default.overrides.env.TEST_ALL.matrix.value]]
python = [
    "3.8",
    "3.9",
    "3.10",
    "3.11",
    "3.12",
    "pypy3.8",
    "pypy3.9",
    "pypy3.10",
]

[tool.ruff]
line-length = 120
show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
dummy-variable-rgx = "^_+$"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "YTT", # flake8-2020
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4",
    "T10",
    "EXE",
    "FA",
    "ICN",
    "INP",
    "PIE",
    "T20",
    "PT",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "PGH",
    "PL",
    "PERF",
    "RUF",
    "LOG",

    "TRY004",
    "TRY20",
    "TRY302",

    #"ARG",
    #"PTH",
    #"UP",  # pyupgrade
    "I",  # import order


    "Q002", # Single quote docstring found but double quotes preferred
    "Q004", # Unnecessary escape on inner quote character
]
ignore = [
    "E402",  # module level import not at top of file
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    "E741",  # ambiguous variable name

    "B008",  # Do not perform calls in argument defaults
    "B023",  # Function definition does not bind loop variable
    "B011",  # Do not `assert False`
    "B028",  # No explicit `stacklevel` keyword argument found
    "B034",  # `re.split` should pass `maxsplit` and `flags` as keyword arguments
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err/None`

    "D1",    # Missing docstring
    "D202",  # No blank lines allowed after function docstring
    "D203",  # Blank line required before class docstring
    "D205",  # Blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line
    "D400",  # First line should end with a period
    "D401",  # First line of docstring should be in imperative mood
    "D406",  # Section name should end with a newline
    "D407",  # Missing dashed underline after section
    "D413",  # Missing blank line after last section
    "D415",  # First line should end with a punctuation
    "D417",  # Missing argument description in the docstring

    "PT009",
    "PT015",
    "PT018",
    "PT027",

    "SIM102",
    "SIM108",
    "SIM114",
    "SIM117",
    "SIM223",

    "PLR09",
    "PLR2004",
    "PLW0603",
    "PERF203",
    "PLR6201",

    "COM812",  # Trailing comma missing
    "PIE790",
    "PIE807",
    "RET502",

    "RUF001",
    "RUF003",
    "RUF012",
    "RUF013",

    # FIXME
    "A001",  # Variable is shadowing a Python builtin
    "A002",  # Argument is shadowing a Python builtin
    "B006",  # Do not use mutable data structures for argument defaults
    "B007",  # Loop control variable not used within loop body
    "B026",  # Star-arg unpacking after a keyword argument is discouraged
    "SIM115",
    "TID252",
    "PLW2901",
    "PERF401",
    "RUF100"

]
external = ["I"]

[tool.ruff.lint.per-file-ignores]
"devscripts/lazy_load_template.py" = ["F401"]

"test/testdata/yt_dlp_plugins/*" = ["INP001"]
"test/testdata/zipped_plugins/*" = ["INP001"]

"test/*" = ["T20"]
"devscripts/*" = ["T20"]
"bundle/*" = ["T20"]
"yt_dlp/__pyinstaller/*" = ["T20"]

[tool.ruff.lint.isort]
split-on-trailing-comma = false
relative-imports-order = "closest-to-furthest"
known-first-party = [
    "bundle",
    "devscripts",
    "test",
]

[tool.autopep8]
max_line_length = 120
recursive = true
exit-code = true
jobs = 0

[tool.pytest.ini_options]
addopts = "-ra -v --strict-markers"
markers = [
    "download",
]
