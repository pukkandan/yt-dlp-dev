name: Build
on: push

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      version_suffix: ${{ steps.version_suffix.outputs.version_suffix }}
      ytdlp_version: ${{ steps.bump_version.outputs.ytdlp_version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v2
      with:
          python-version: '3.10'

    - name: Set version suffix
      id: version_suffix
      env:
        PUSH_VERSION_COMMIT: ${{ secrets.PUSH_VERSION_COMMIT }}
      if: "env.PUSH_VERSION_COMMIT == ''"
      run: echo ::set-output name=version_suffix::$(date -u +"%H%M%S")
    - name: Bump version
      id: bump_version
      run: |
        python devscripts/update-version.py ${{ steps.version_suffix.outputs.version_suffix }}
        make issuetemplates

    - name: Push to release
      id: push_release
      run: |
        git config --global user.name github-actions
        git config --global user.email github-actions@example.com
        git add -u
        git commit -m "[version] update" -m "Created by: ${{ github.event.sender.login }}" -m ":ci skip all :ci run dl"
        git push origin --force ${{ github.event.ref }}:release
        echo ::set-output name=head_sha::$(git rev-parse HEAD)
    - name: Update master
      env:
        PUSH_VERSION_COMMIT: ${{ secrets.PUSH_VERSION_COMMIT }}
      if: "env.PUSH_VERSION_COMMIT != ''"
      run: git push origin ${{ github.event.ref }}
    - name: Get Changelog
      run: |
        changelog=$(grep -oPz '(?s)(?<=### 2022.06.22\n{2}).+?(?=\n{2,3}###)' Changelog.md) || true
        echo "changelog<<EOF" >> $GITHUB_ENV
        echo "$changelog" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.ytdlp_version }}
        release_name: yt-dlp ${{ steps.bump_version.outputs.ytdlp_version }}
        commitish: ${{ steps.push_release.outputs.head_sha }}
        draft: true
        prerelease: false
        body: |
          #### [A description of the various files]((https://github.com/yt-dlp/yt-dlp#release-files)) are in the README

          ---
          <details open><summary><h3>Changelog</summary>
          <p>

          ${{ env.changelog }}

          </p>
          </details>

  build_windows:
    runs-on: windows-latest
    needs: create_release
    outputs:
      sha256_win: ${{ steps.get_sha.outputs.sha256_win }}
      sha512_win: ${{ steps.get_sha.outputs.sha512_win }}
      sha256_py2exe: ${{ steps.get_sha.outputs.sha256_py2exe }}
      sha512_py2exe: ${{ steps.get_sha.outputs.sha512_py2exe }}
      sha256_win_zip: ${{ steps.get_sha.outputs.sha256_win_zip }}
      sha512_win_zip: ${{ steps.get_sha.outputs.sha512_win_zip }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:  # 3.8 is used for Win7 support
          python-version: '3.8'
    - name: Install Requirements
      run: |  # Custom pyinstaller built with https://github.com/yt-dlp/pyinstaller-builds
          python -m pip install --upgrade pip setuptools wheel py2exe
          pip install "https://yt-dlp.github.io/Pyinstaller-Builds/x86_64/pyinstaller-4.10-py3-none-any.whl" -r requirements.txt

    - name: Prepare
      run: |
          python devscripts/update-version.py ${{ needs.create_release.outputs.version_suffix }}
          python devscripts/make_lazy_extractors.py
    - name: Build
      run: |
          python setup.py py2exe
          Move-Item ./dist/yt-dlp.exe ./dist/yt-dlp_min.exe
          python pyinst.py
          python pyinst.py --onedir
          Compress-Archive -Path ./dist/yt-dlp/* -DestinationPath ./dist/yt-dlp_win.zip
    - name: Get SHA2-SUMS
      id: get_sha
      run: |
          echo "::set-output name=sha256_py2exe::$((Get-FileHash dist\yt-dlp_min.exe -Algorithm SHA256).Hash.ToLower())"
          echo "::set-output name=sha512_py2exe::$((Get-FileHash dist\yt-dlp_min.exe -Algorithm SHA512).Hash.ToLower())"
          echo "::set-output name=sha256_win::$((Get-FileHash dist\yt-dlp.exe -Algorithm SHA256).Hash.ToLower())"
          echo "::set-output name=sha512_win::$((Get-FileHash dist\yt-dlp.exe -Algorithm SHA512).Hash.ToLower())"
          echo "::set-output name=sha256_win_zip::$((Get-FileHash dist\yt-dlp_win.zip -Algorithm SHA256).Hash.ToLower())"
          echo "::set-output name=sha512_win_zip::$((Get-FileHash dist\yt-dlp_win.zip -Algorithm SHA512).Hash.ToLower())"

    - name: Upload py2exe binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/yt-dlp_min.exe
        asset_name: yt-dlp_min.exe
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload standalone binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/yt-dlp.exe
        asset_name: yt-dlp.exe
        asset_content_type: application/vnd.microsoft.portable-executable
    - name: Upload onedir binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./dist/yt-dlp_win.zip
        asset_name: yt-dlp_win.zip
        asset_content_type: application/zip


  finish:
    runs-on: ubuntu-latest
    needs: [create_release, build_windows]

    steps:
    - name: Make SHA2-SUMS files
      run: |
        echo "${{ needs.build_windows.outputs.sha256_win }}  yt-dlp.exe" >> SHA2-256SUMS
        echo "${{ needs.build_windows.outputs.sha256_py2exe }}  yt-dlp_min.exe" >> SHA2-256SUMS
        echo "${{ needs.build_windows.outputs.sha256_win_zip }}  yt-dlp_win.zip" >> SHA2-256SUMS
        echo "${{ needs.build_windows.outputs.sha512_win }}  yt-dlp.exe" >> SHA2-512SUMS
        echo "${{ needs.build_windows.outputs.sha512_py2exe }}  yt-dlp_min.exe" >> SHA2-512SUMS
        echo "${{ needs.build_windows.outputs.sha512_win_zip }}  yt-dlp_win.zip" >> SHA2-512SUMS
    - name: Upload SHA2-256SUMS file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./SHA2-256SUMS
        asset_name: SHA2-256SUMS
        asset_content_type: text/plain
    - name: Upload SHA2-512SUMS file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./SHA2-512SUMS
        asset_name: SHA2-512SUMS
        asset_content_type: text/plain

    - name: Make Update spec
      run: |
        echo "# This file is used for regulating self-update" >> _update_spec
    - name: Upload update spec
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./_update_spec
        asset_name: _update_spec
        asset_content_type: text/plain

    - name: Finalize release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          /repos/${{ github.repository }}/releases/${{ needs.create_release.outputs.release_id }} \
          -F draft=false
